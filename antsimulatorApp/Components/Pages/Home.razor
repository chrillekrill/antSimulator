@page "/"
@using antsimulatorApp.Services
@inject GridService gridService

<h1>SIM @Time</h1>

<div class="sim-grid">
    @for (int i = 0; i < rows; i++)
    {
        @for (int j = 0; j < columns; j++)
        {
            @* <div class="sim-square @(grid[i,j] == 1 ? "edge" : "" )">
    <p>@grid[i,j]</p>
    </div> *@
            @if (grid[i, j] == 1)
            {
                <div class="sim-square edge">
                </div>
            }
            else if (grid[i, j] == 2)
            {
                <div class="sim-square grass">
                </div>
            }
            else if (grid[i, j] == 0)
            {
                <div class="sim-square dirt">
                </div>
            }

        }
    }
</div>

@code {

    public int Time { get; set; }

    private System.Threading.Timer? timer;


    int rows = 40;
    int columns = 40;

    int[,] grid = new int[40, 40];

    protected override async Task OnInitializedAsync()
    {
        var getGrid = await gridService.GetGrid();

        if (getGrid != null)
        {
            grid = getGrid.Grid;
        }
        else
        {
            Random rnd = new Random();

            for (int i = 0; i < 40; i++)
            {
                for (int j = 0; j < 40; j++)
                {
                    if (i == 0 || i == 39 || j == 0 || j == 39)
                    {
                        grid[i, j] = 1;
                    }
                    else
                    {
                        int randomValue = rnd.Next(0, 2) * 2; // Generate either 0 or 2

                        grid[i, j] = randomValue;
                    }
                }
            }

            var res = await gridService.UploadGrid(grid);
        }
        //timer = new System.Threading.Timer(UpdateCounter, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {
            // time += 1;
            // StateHasChanged();

            await InvokeAsync(async () =>
            {
                Time++;
                await InvokeAsync(StateHasChanged);
            });
        },null , 1000, 1000);
    }
    
}